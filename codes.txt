#########################################
     ######最大公约数最小公倍数######
#########################################
----问题描述
----求两数的最大公约数和最小公倍数
----
----更相减损术----
----
     int a, b, n1, n2;
	scanf("%d%d", &a, &b);
	n1 = a;
	n2 = b;
	while (a != b) {
		if (a > b)
			a -= b;
		else
			b -= a;
	}
	printf("最大公约数为：%d,最小公倍数为:%d", a,n1*n2/a);
----
----辗转相除法,循环----
----
     int a, b,r;
	scanf("%d%d", &a, &b);
	if (a < b) {
		a = a ^ b;
		b = a ^ b;
		a = a ^ b;
	}
	while (b) {
		r = a % b;
		a = b;
		b = r;
	}
	printf("最大公约数为：%d", a);
----
----辗转相除法,递归----
----
void main() {
	int mcd(int, int);
	int a, b;
	scanf("%d%d", &a, &b);
	if (a < b) {
		a = a ^ b;
		b = a ^ b;
		a = a ^ b;
	}
	printf("最大公约数为：%d", mcd(a, b));

}

int mcd(int a, int b)
{
	if (b)
		return mcd(b, a%b);
	else
		return a;
}
#########################################
     ###########百钱买百鸡###########
#########################################
----问题描述
----公鸡一只5元，母鸡一只3元，小鸡3只1元，求100元买100只鸡中，公鸡/母鸡/小鸡各多少
----
----三次循环----
----
     int i, j, k;
	for ( i = 0; i <= 100; i++)
	{
		for (j = 0; j <= 100; j++)
		{
            for(k = 0; k <= 100; k++)
		 if (i*5+j*3+k/3 == 100 && i+j+k == 100 && k%3 == 0) 
            printf("%d,%d,%d\n", i, j, k);
		}
	}
----
----两次循环----
----
     int i, j, k;
	for ( i = 0; i <= 20; i++)
	{
		for (j = 0; j <= 33; j++)
		{
			k = 100 - i - j;
		 if (i*5+j*3+k/3 == 100 && k%3 == 0) 
            printf("%d,%d,%d\n", i, j, k);
		}
	}
#########################################
     ########数组中n个数反序#########
#########################################
#define N 10
void main() {
	void swap(int[], int);
	int a[N] = { 1,2,3,4,5,6,7,8,9,10 };
	swap(a, 5);
}

void swap(int a[], int n) {
	for (int i = 0; i < n / 2; i++)
	{
		a[i] = a[i] ^ a[n - i - 1];
		a[n - i - 1] = a[i] ^ a[n - i - 1];
		a[i] = a[i] ^ a[n - i - 1];
	}
	int *p = a;
	while (p < a + N) printf("%d ", *p++);
}
#########################################
     ############排序算法###########
#########################################
----
----冒泡排序----算法平均时间复杂度O(n^2)，稳定排序算法
----
const int N = 10;
void main() {
	int arr[N] = { 2,3,1,7,8,5,6,10,9,4 };
	int i, j;

	for (i = 0; i < N-1; i++)
	{
		for (j = 0; j < N - i - 1; j++) {
			if (arr[j] > arr[j + 1]) {
				arr[j] = arr[j] ^ arr[j + 1];
				arr[j + 1] = arr[j] ^ arr[j + 1];
				arr[j] = arr[j] ^ arr[j + 1];
			}
		}
	}

	int *p = arr;
	while (p < arr + N) printf("%3d", *p++);
}
----
----选择排序----算法平均时间复杂度O(n^2)，不稳定排序算法
----
const int N = 10;
void main() {
	int arr[N] = { 2,3,1,7,8,5,6,10,9,4 };
	int i, j, k;

	for (i = 0; i < N-1; i++)
	{
		k = i;
		for (j = i+1; j  < N; j++)
		{
			if (arr[j] < arr[k]) k = j;
		}
		if (k != i) {
			arr[k] = arr[i] ^ arr[k];
			arr[i] = arr[i] ^ arr[k];
			arr[k] = arr[i] ^ arr[k];
		}
	}

	int *p = arr;
	while (p < arr + N) printf("%3d", *p++);
}
###########################################################
     ############计算总平均分和第n个学生成绩###########
###########################################################

	void main() {
		void avg(float *, int);
		void search(float (*p)[4], int);
		float score[3][4] = 
		{
			{1,2,3,4},
			{5,6,7,8},
			{9,10,11,12}
		};
		int num;
		int len = (sizeof score) / (sizeof score[0][0]);
		avg(*score, len);
		printf("查询第几个学生的成绩:\n");
		scanf("%d", &num);
		search(score, num);
		system("pause");
	}

	void avg(float *p, int n) {
		float avg = 0,sum = 0;
		float *temp = p;
		while (p < temp + n) {
			sum += *p;
			p++;
		}
		avg = sum / n;
		printf("3位学生的总平均成绩为：%5.1f\n",avg);
	}

	void search(float (*p)[4], int n) {
		int i = 0;
		printf("第%d个学生各科的成绩分别为：\n", n);
		while (i < 4) {
			printf("%5.1f",*(*(p + n) + i));	
			i++;
		}
		putchar(10);
	}
############################################
     ############约瑟夫环问题###########
############################################
----问题描述
----编号为 1，2，3，…，n 的 n 个人围坐一圈，任选一个正整数 m 作为报数上限值，
----从第一个人开始按顺时针方向报数，报数到 m 时停止，报数为 m 的人出列。
----从出列人的顺时针方向的下一个人开始又从 1 重新报数，如此下去，直到所有人都全部出列为止。
----

int n, m, i, s = 0;
	printf("input number of person and the flag:");
	scanf("%d%d", &n, &m);
	for (i = 2; i <= n; i++)
	{
		s = (s + m) % i;//数学思路
	}
	printf("\nThe winner is %d\n", s + 1);
############################################
     ##########三天打渔两天晒网#########
############################################
----问题描述
----如果一个渔夫从2011年1月1日开始每三天打一次渔，两天晒一次网，
----编程实现当输入2011年1月 1日以后的任意一天，输出该渔夫是在打渔还是在晒网。
----

const int LEAP = 366;
const int NONLEAP = 365;
const int initalYear = 2011;//初始年份

int isLeap(int year) {
	if (year % 4 == 0 && year % 100 != 0 || year % 400 == 0) return 1;
	else return 0;
}

int totalDays(int year, int month, int day) {
	int i, j, days = 0;
	int leap[12] = { 31,29,31,30,31,30,31,31,30,31,30,31 };
	int nonleap[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };

	if (isLeap(year)) {
		for ( i = 0; i < month-1; i++)
		{
			days += leap[i];
		}
	}
	else {
		for (i = 0; i < month - 1; i++)
		{
			days += leap[i];
		}
	}

	for ( i = initalYear; i < year; i++)
	{
		if (isLeap(year)) {
			days += LEAP;
		}
		else {
			days += NONLEAP;
		}
	}

	days += day;
	return days;
}

void main()
{
	int year, month, day, days;
	printf("please input year,month,day:\n");
	scanf("%d%d%d", &year, &month, &day);

	days = totalDays(year, month, day);

	//余数为1、2、3打渔否则晒网
	if (days % 5 > 0 && days % 5 < 4) printf("%d年%d月%d日打渔\n", year, month, day);
	else printf("%d年%d月%d日晒网\n", year, month, day);

	system("pause");
}

####################################
     ##########判别素数#########
####################################
----问题描述
----素数又称质数。所谓素数是指除了 1 和它本身以外，不能被任何整数整除的数。
----输入一个整数判断它是否是素数
----思路分析
----思路1)：因此判断一个整数m是否是素数，只需把 m 被 2 ~ m-1 之间的每一个整数去除，如果都不能被整除，那么 m 就是一个素数。
----思路2)：m 不必被 2 ~ m-1 之间的每一个整数去除，只需被 2 ~ 根号m 之间的每一个整数去除就可以了。
----如果 m 不能被 2 ~ 根号m  间任一整数整除，m 必定是素数。（循环次数更少，执行更快）
----
----思路一，最基础的方法----
----
int isPrime(int num) {
	int i = 2;
	while (i < num) {
		if (num%i == 0) return 0;
		i++;	
	}
	return 1;
}

void main() {
	int num,temp;
	printf("please input a integer:\n");
	scanf("%d", &num);
	temp = isPrime(num);
	if (temp) printf("%d是素数。\n", num);
	else printf("%d不是素数。\n", num);

}
----
----思路二，循环次数更少，更快----
----
int isPrime(int num) {
	int i = 2,temp;
	//sqrt需接收double类型参数，强行转换num的类型
	temp = (int)sqrt((double)num);
	while (i <= temp) {
		if (num%i == 0) return 0;
		i++;	
	}
	return 1;
}

####################################
     #########求水仙花数########
####################################
----问题描述
----“水仙花数”是指一个三位数其各位数字的立方和等于该数本身，例如153是“水仙花数”，因为：153 = 1^3 + 5^3 + 3^3。
----
int isDaffodil(int num) {
	int hundred, tens, single, temp;
	hundred = num / 100;//百位
	tens = num % 100 / 10;//十位
	single = num % 10;//个位
	temp = hundred*hundred*hundred + tens*tens*tens + single*single*single;

	if (temp == num) return 1;
	else return 0;
}

void main() {
	int num,temp;
	printf("please input a three-digit integer:\n");
	scanf("%d", &num);
	temp = isDaffodil(num);
	if (temp) printf("%d是水仙花数。\n", num);
	else printf("%d不是水仙花数。\n", num);
}
####################################
     #########汉诺塔########
####################################
----问题描述
----一块板上有三根针 A、B、C。A 针上套有 64 个大小不等的圆盘，
----按照大的在下、小的在上的顺序排列，要把这 64 个圆盘从 A 针移动到 C 针上，
----每次只能移动一个圆盘，移动过程可以借助 B 针。但在任何时候，任何针上的圆盘都必须保持大盘在下，小盘在上。
----从键盘输入需移动的圆盘个数，给出移动的过程。
----思路分析
----（1）将n-1个盘子从一座移动到另一座上（n>1）；（2）将一个盘子从一座移动到另一座上；（3）递归
----
void move(char x, char y) {
	printf("%c---->%c\n", x, y);
}

void hanoi(int n, char a, char b, char c) {
	if (n == 1) {
		move(a, c);
	}
	else {
		hanoi(n - 1, a, c, b);
		move(a, c);
		hanoi(n - 1, b, a, c);
	}
}

void main() {
	int n;
	printf("please input the number of diskes:\n");
	scanf("%d", &n);
	hanoi(n, 'A', 'B', 'C');
}
#################################
     #########逆序########
################################
----问题描述
----输入一个整数，然后逆序输出
----
int reverse(int num) {
	int split[20],i,factor=1,result=0;
	for (i = 0; num != 0; i++)
	{
		//假设输入1234，数组split倒序存储4,3,2,1
		split[i] = num % 10;
		num /= 10;
	}
	for(; i>0; i--)
	{
		result += split[i - 1] * factor;
		factor *= 10;
	}
	return result;
}
####################################
     #########统计字符########
####################################
----问题描述
----输入一行字符，分别统计出其中字母、数字、空格和其他字符的个数。
----
void count() {
	char c;
	int count, letters, space, digit, others;
	count = letters = space = digit = others = 0;

	while ((c = getchar()) != '\n') {
		count++;
		if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') letters++;
		else if (c >= '0' && c <= '9') digit++;
		else if (c == ' ') space++;
		else others++;
	}
	printf("共输入%d个字符，其中字母%d个，数字%d，空格%d个，其他字符%d个\n", count, letters, digit, space, others);
}
################################
     #########完数########
################################
----问题描述
----一个数如果恰好等于它的因子之和，这个数就成为“完数”，eg.6=1*2*3=1+2+3
----求1000以内的所有完数和它的因子
----
void wanNum() {
	int num, i, sum;
	for ( num = 2; num <= 1000; num++)
	{
		sum = 0;
		for ( i = 1; i < num; i++)
		{
			if (num%i == 0) sum += i;

		}
		if (sum == num) {
			printf("%d,its factors are:",num);
			for ( i = 1; i < num; i++)
			{
				if (num%i == 0) printf("%d ", i);
			}
			putchar(10);
		}	
	}
}

####################################
     #########字符串交换########
####################################
----
----方法一
----
void swop(char **str1, char **str2)
{
	char *temp = NULL;

	temp = *str1;
	*str1 = *str2;
	*str2 = temp;
}

void main()
{
	char *str1 = "hello";
	char *str2 = "world";

	printf("str1 = %s, str2 = %s\n", str1, str2);
	swop(&str1, &str2);
	printf("str1 = %s, str2 = %s\n", str1, str2);
}

----
----方法二
----
void main()
{
	char str1[] = "hello";
	char str2[] = "world";
	char temp[10];

	printf("str1 = %s, str2 = %s\n", str1, str2);
	strcpy(temp, str1);
	strcpy(str1, str2);
	strcpy(str2, temp);
	printf("str1 = %s, str2 = %s\n", str1, str2);
}
#############################################
     #########统计单词个数########
#############################################
----问题描述
----打开一个文件或从键盘输入，统计其中有多少个单词，单词之间用空格或标点分隔开
----
----文件读入
----
int notSymbol(char c) {
	if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c>='0' && c<='9') return 1;
	else return 0;
}

void main()
{
	FILE *fp;
	char ch;
	int word = 0, count = 0;
	//words.txt中内容:I am a boy and I am 22 years old!
	if ((fp = fopen("words.txt", "r")) == NULL) {
		printf("file cant open.\n");
		exit(0);
	}

	ch = fgetc(fp);
	while (!feof(fp)) {
		//开闭原则
		if (ch == ' ') word = 0;
		else if (!notSymbol(ch)) word = 0;
		else if (word == 0) {
			word = 1;
			count++;
		}
		putchar(ch);
		ch = fgetc(fp);
	}
	putchar(10);
	fclose(fp);
	//输出：There are 10 words in the file.
	printf("There are %d words in the file.\n", count);
}
----
----从键盘输入
----

int notSymbol(char c) {
	if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c>='0' && c<='9') return 1;
	else return 0;
}

void main()
{
	char ch,str[80];
	int i = 0, word = 0, count = 0;
	printf("please input string:\n");
	gets_s(str);
	ch = str[i];
	while (ch != '\0') {
		if (ch == ' ') word = 0;
		else if (!notSymbol(ch)) word = 0;
		else if (word == 0) {
			word = 1;
			count++;
		}
		putchar(ch);
		i++;
		ch = str[i];
	}
	putchar(10);
	printf("There are %d words in the file.\n", count);
}